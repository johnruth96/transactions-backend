import csv
from datetime import datetime

from django.core.management.base import BaseCommand
from django.db import transaction

from bank_account.models import Transaction, Account


class Command(BaseCommand):
    help = "Read CSV file generated by ING-DiBa AG"

    def add_arguments(self, parser):
        parser.add_argument("file")

    def handle(self, *args, **options):
        file = options.get("file")

        with open(file, encoding="iso-8859-1") as f:
            reader = csv.reader(f, delimiter=";")

            reading_payload = False
            contains_saldo = False

            iban = None
            name = None

            transactions = []
            for row in reader:
                if not row:
                    continue

                if row[0] == "IBAN":
                    iban = row[1].replace(" ", "").strip()

                if row[0] == "Kontoname":
                    name = row[1]

                if row[0] == "Saldo":
                    contains_saldo = True
                    print("File contains 'Saldo'")

                if row[0] == "Buchung":
                    reading_payload = True
                    continue

                if reading_payload:
                    amount_str = row[7] if contains_saldo else row[5]
                    currency = row[8] if contains_saldo else row[6]

                    transactions.append(dict(
                        booking_date=datetime.strptime(row[0], "%d.%m.%Y"),
                        value_date=datetime.strptime(row[1], "%d.%m.%Y"),
                        creditor=row[2],
                        transaction_type=row[3],
                        purpose=row[4],
                        amount=float(amount_str.replace(".", "").replace(",", ".")),
                        currency=currency,
                    ))

            with transaction.atomic():
                account, _ = Account.objects.get_or_create(
                    iban=iban,
                    name=name,
                )

                num_created = 0
                for transaction_dict in transactions:
                    _, created = Transaction.objects.get_or_create(
                        account=account,
                        **transaction_dict,
                    )

                    if created:
                        num_created += 1

                print(f"Done. Added {num_created}/{len(transactions)} transactions")
